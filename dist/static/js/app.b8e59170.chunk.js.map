{"version":3,"sources":["App.tsx"],"names":["styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","title","fontSize","position","alignSelf","top","Dimensions","get","height","buttons","bottom","generateButton","borderWidth","borderColor","padding","borderRadius","color","marginBottom","enabledButton","opacity","generatedCode","disabledButton","tooltip","overflow","App","useState","code","setCode","setTooltip","generateRandomTextCode","clear","Clipboard","setTimeout","chars","result","i","charAt","Math","floor","random","length","getRandomCode","style","onPress","disabled"],"mappings":"mNAWMA,EAASC,IAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNC,gBAAiB,OACjBC,WAAY,SACZC,eAAgB,UAElBC,MAAO,CACLJ,KAAM,EACNK,SAAU,GACVC,SAAU,WACVC,UAAW,SACXC,IAAuC,GAAlCC,IAAWC,IAAI,UAAUC,QAEhCC,QAAS,CACPN,SAAU,WACVO,OAA0C,IAAlCJ,IAAWC,IAAI,UAAUC,QAEnCG,eAAgB,CACdC,YAAa,EACbC,YAAa,MACbC,QAAS,GACTC,aAAc,GACdC,MAAO,MACPC,aAAc,IAEhBC,cAAe,CACbC,QAAS,GAEXC,cAAe,CACbJ,MAAO,MACPb,SAAU,WACVE,KAAM,GACNH,SAAU,IAEZmB,eAAgB,CACdF,QAAS,GACTN,YAAa,QAEfS,QAAS,CACPN,MAAO,QACPb,SAAU,WACVO,OAA0C,GAAlCJ,IAAWC,IAAI,UAAUC,OACjCN,SAAU,GACVY,QAAS,GACThB,gBAAiB,UACjBqB,QAAS,GACTJ,aAAc,GACdF,YAAa,UACbD,YAAa,EACbW,SAAU,YAaC,SAASC,IACtB,MAAwBC,mBAAiB,IAAzC,WAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,oBAAkB,GAAhD,WAAOH,EAAP,KAAgBM,EAAhB,KACMC,EAAyB,SAACC,GAC3BA,GACDC,IAAoBL,GACpBE,GAAW,GACXI,YAAW,WACTJ,GAAW,GACXD,EAAQ,MACP,MAEHA,EArBgB,WAGpB,IAFA,IAAIM,EAAQ,uDACRC,EAAS,GACJC,EAAE,EAAGA,EAAE,GAAIA,IAClBD,GAAUD,EAAMG,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,EAAMO,SAE1D,OAAON,EAeKO,KAIZ,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMC,MAAOjD,EAAOG,WAClB,kBAAC,IAAD,CAAM8C,MAAO,CAACjD,EAAOQ,QAArB,oBACA,kBAAC,IAAD,CAAMyC,MAAOjD,EAAOG,WAClB,kBAAC,IAAD,CAAkB8C,MAAOjD,EAAOgB,QAASkC,QAAS,kBAAMd,GAAuB,KAC7E,kBAAC,IAAD,CAAMa,MAAOjD,EAAOkB,gBAApB,uBAEF,kBAAC,IAAD,CACE+B,MAAO,CAACjD,EAAOgB,QAAyB,IAAhBiB,EAAKc,OAAe/C,EAAO4B,eAAiB5B,EAAOyB,eAC3EyB,QAAS,kBAAMd,GAAuB,IACtCe,SAA0B,IAAhBlB,EAAKc,QAEf,kBAAC,IAAD,CAAME,MAAOjD,EAAOkB,gBAApB,sBAGAe,EAAKc,OAAS,EACZ,kBAAC,IAAD,CAAME,MAAOjD,EAAO2B,eAAgBM,GAClC,qCAGJJ,EACE,kBAAC,IAAD,CAAMoB,MAAOjD,EAAO6B,SAApB,0CACE,0C","file":"static/js/app.b8e59170.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  Dimensions,\n  Text,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport * as Clipboard from 'expo-clipboard';\nimport { RootSiblingParent } from 'react-native-root-siblings';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    flex: 1,\n    fontSize: 42,\n    position: 'relative',\n    alignSelf: 'center',\n    top: Dimensions.get('window').height * .3,\n  },\n  buttons: {\n    position: 'relative',\n    bottom: Dimensions.get('window').height * .05,\n  },\n  generateButton: {\n    borderWidth: 2,\n    borderColor: 'red',\n    padding: 20,\n    borderRadius: 10,\n    color: 'red',\n    marginBottom: 30\n  },\n  enabledButton: {\n    opacity: 1\n  },\n  generatedCode: {\n    color: 'red',\n    position: 'absolute',\n    top: -20,\n    fontSize: 25,\n  },\n  disabledButton: {\n    opacity: .2,\n    borderColor: 'blue'\n  },\n  tooltip: {\n    color: 'white',\n    position: 'absolute',\n    bottom: Dimensions.get('window').height * .1,\n    fontSize: 15,\n    padding: 10,\n    backgroundColor: '#D3D3D3',\n    opacity: 0.9,\n    borderRadius: 10,\n    borderColor: '#D3D3D3',\n    borderWidth: 2,\n    overflow: 'hidden',\n  }\n});\n\nconst getRandomCode = () => {\n  let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  for (let i=0; i<10; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return result;\n};\n\nexport default function App() {\n  const [code, setCode] = useState<string>('');\n  const [tooltip, setTooltip] = useState<boolean>(false);\n  const generateRandomTextCode = (clear?: boolean) => {\n    if(clear) {\n      Clipboard.setString(code);\n      setTooltip(true);\n      setTimeout(() => {\n        setTooltip(false)\n        setCode('');\n      }, 2000);\n    } else {\n      setCode(getRandomCode());\n    }\n  };\n\n  return (\n    <RootSiblingParent>\n      <View style={styles.container}>\n        <Text style={[styles.title]}>ily ‚ù§Ô∏è</Text>\n        <View style={styles.container}>\n          <TouchableOpacity style={styles.buttons} onPress={() => generateRandomTextCode(false)}>\n            <Text style={styles.generateButton}>Generate Text Code</Text>\n          </TouchableOpacity>\n          <TouchableOpacity\n            style={[styles.buttons, code.length === 0 ? styles.disabledButton : styles.enabledButton]}\n            onPress={() => generateRandomTextCode(true)}\n            disabled={code.length === 0}\n          >\n            <Text style={styles.generateButton}>Copy & Clear Code</Text>\n          </TouchableOpacity>\n          {\n            code.length > 0 ? (\n              <Text style={styles.generatedCode}>{code}</Text>\n            ) : <></>\n          }\n          {\n            tooltip ? (\n              <Text style={styles.tooltip}>Copied to clipboard babez üòé</Text>\n            ) : <></>\n          }\n        </View>\n      </View>\n    </RootSiblingParent>\n  );\n}\n"],"sourceRoot":""}